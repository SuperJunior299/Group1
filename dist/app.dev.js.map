{"version":3,"sources":["app.js"],"names":["express","require","MongoClient","port","process","env","PORT","app","mongoose","dbName","mongoUrl","collectionName","use","urlencoded","extended","json","get","req","res","render","post","body","username","password","User","findOne","user","status","message","fullName","dateOfBirth","email","phone","client","useUnifiedTopology","connect","db","collection","$or","existingUser","send","newUser","insertOne","result","insertedCount","close","console","error","listen","log"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst { MongoClient } = require('mongodb');\r\nconst port = process.env.PORT || 3000; \r\nconst app = express();\r\nconst mongoose = require('mongoose');\r\nconst dbName = 'Web'; \r\nconst mongoUrl = 'mongodb+srv://lekhanhtoan07:T14012003oan@server1.h0nl7gl.mongodb.net/';\r\nconst collectionName = 'Test';\r\n\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.static('public'));\r\napp.use(express.json());\r\n\r\n// REGISTER FUNCTION\r\napp.get(\"/index\", (req, res) => {\r\n  res.render(\"index\");\r\n});\r\n\r\napp.get('/loginpage', (req, res) => {\r\n  // Handle the GET request for the login page\r\n  res.render('loginpage'); // Or send a login HTML page\r\n});\r\n\r\napp.post('/loginpage', async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  // Find a user with the provided username and password\r\n  const user = await User.findOne({ username , password  });\r\n\r\n  if (user) {\r\n    res.status(200).json({ message: 'Login successful' });\r\n  } else {\r\n    res.status(401).json({ message: 'Login failed' });\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\napp.post('/index', async (req, res) => {\r\n    const { fullName, dateOfBirth, email, username, phone, password } = req.body;\r\n\r\n    try {\r\n        const client = new MongoClient(mongoUrl, { useUnifiedTopology: true });\r\n        await client.connect();\r\n\r\n        const db = client.db(dbName);\r\n        const collection = db.collection(collectionName);\r\n\r\n        // Check if email or username already exist\r\n        const existingUser = await collection.findOne({ $or: [{ email }, { username }] });\r\n        if (existingUser) {\r\n            return res.send('Email or username already exists');\r\n        }\r\n\r\n        // Insert the new user into the database\r\n        const newUser = {\r\n            fullName,\r\n            dateOfBirth,\r\n            email,\r\n            username ,\r\n            phone,\r\n            password , \r\n        };\r\n\r\n        const result = await collection.insertOne(newUser);\r\n        if (result.insertedCount === 1) {\r\n            res.send('Registration failed.');\r\n        } else {\r\n            res.send('Registration successful! ');\r\n        }\r\n\r\n        client.close();\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send('Internal server error');\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\napp.listen(port, () => {\r\n    console.log(`Server is running on port ${port}`);\r\n});  "],"file":"app.dev.js"}