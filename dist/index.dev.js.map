{"version":3,"sources":["index.js"],"names":["express","require","bodyParser","MongoClient","port","process","env","PORT","app","mongoUrl","dbName","collectionName","use","urlencoded","extended","post","req","res","body","fullName","dateOfBirth","email","username","phone","password","client","useUnifiedTopology","connect","db","collection","findOne","$or","existingUser","send","newUser","insertOne","result","insertedCount","close","console","error","status","listen","log"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;eACwBA,OAAO,CAAC,SAAD,C;IAAvBE,W,YAAAA,W;;AACR,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,IAAMC,GAAG,GAAGR,OAAO,EAAnB;AAEA,IAAMS,QAAQ,GAAG,uEAAjB;AACA,IAAMC,MAAM,GAAG,KAAf;AACA,IAAMC,cAAc,GAAG,MAAvB;AAEAH,GAAG,CAACI,GAAJ,CAAQV,UAAU,CAACW,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAN,GAAG,CAACI,GAAJ,CAAQZ,OAAO,UAAP,CAAe,QAAf,CAAR,E,CAAmC;;AAEnCQ,GAAG,CAACO,IAAJ,CAAS,WAAT,EAAsB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACkDD,GAAG,CAACE,IADtD,EACVC,QADU,aACVA,QADU,EACAC,WADA,aACAA,WADA,EACaC,KADb,aACaA,KADb,EACoBC,QADpB,aACoBA,QADpB,EAC8BC,KAD9B,aAC8BA,KAD9B,EACqCC,QADrC,aACqCA,QADrC;AAAA;AAIRC,UAAAA,MAJQ,GAIC,IAAItB,WAAJ,CAAgBM,QAAhB,EAA0B;AAAEiB,YAAAA,kBAAkB,EAAE;AAAtB,WAA1B,CAJD;AAAA;AAAA,0CAKRD,MAAM,CAACE,OAAP,EALQ;;AAAA;AAORC,UAAAA,EAPQ,GAOHH,MAAM,CAACG,EAAP,CAAUlB,MAAV,CAPG;AAQRmB,UAAAA,UARQ,GAQKD,EAAE,CAACC,UAAH,CAAclB,cAAd,CARL,EAUd;;AAVc;AAAA,0CAWakB,UAAU,CAACC,OAAX,CAAmB;AAAEC,YAAAA,GAAG,EAAE,CAAC;AAAEV,cAAAA,KAAK,EAALA;AAAF,aAAD,EAAY;AAAEC,cAAAA,QAAQ,EAARA;AAAF,aAAZ;AAAP,WAAnB,CAXb;;AAAA;AAWRU,UAAAA,YAXQ;;AAAA,eAYVA,YAZU;AAAA;AAAA;AAAA;;AAAA,2CAaHf,GAAG,CAACgB,IAAJ,CAAS,kCAAT,CAbG;;AAAA;AAgBd;AACMC,UAAAA,OAjBQ,GAiBE;AACZf,YAAAA,QAAQ,EAARA,QADY;AAEZC,YAAAA,WAAW,EAAXA,WAFY;AAGZC,YAAAA,KAAK,EAALA,KAHY;AAIZC,YAAAA,QAAQ,EAARA,QAJY;AAKZC,YAAAA,KAAK,EAALA,KALY;AAMZC,YAAAA,QAAQ,EAARA;AANY,WAjBF;AAAA;AAAA,0CA0BOK,UAAU,CAACM,SAAX,CAAqBD,OAArB,CA1BP;;AAAA;AA0BRE,UAAAA,MA1BQ;;AA2Bd,cAAIA,MAAM,CAACC,aAAP,KAAyB,CAA7B,EAAgC;AAC5BpB,YAAAA,GAAG,CAACgB,IAAJ,CAAS,sBAAT;AACH,WAFD,MAEO;AACHhB,YAAAA,GAAG,CAACgB,IAAJ,CAAS,2BAAT;AACH;;AAEDR,UAAAA,MAAM,CAACa,KAAP;AAjCc;AAAA;;AAAA;AAAA;AAAA;AAmCdC,UAAAA,OAAO,CAACC,KAAR;AACAvB,UAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB,uBAArB;;AApCc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAwCAzB,GAAG,CAACkC,MAAJ,CAAWtC,IAAX,EAAiB,YAAM;AACnBmC,EAAAA,OAAO,CAACI,GAAR,qCAAyCvC,IAAzC;AACH,CAFD","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst { MongoClient } = require('mongodb');\r\nconst port = process.env.PORT || 3000; \r\nconst app = express();\r\n\r\nconst mongoUrl = 'mongodb+srv://lekhanhtoan07:T14012003oan@server1.h0nl7gl.mongodb.net/'; \r\nconst dbName = 'Web'; \r\nconst collectionName = 'Test'; \r\n\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(express.static('public')); // Serve HTML and CSS files from the 'public' directory\r\n\r\napp.post('/register', async (req, res) => {\r\n    const { fullName, dateOfBirth, email, username, phone, password } = req.body;\r\n\r\n    try {\r\n        const client = new MongoClient(mongoUrl, { useUnifiedTopology: true });\r\n        await client.connect();\r\n\r\n        const db = client.db(dbName);\r\n        const collection = db.collection(collectionName);\r\n\r\n        // Check if email or username already exist\r\n        const existingUser = await collection.findOne({ $or: [{ email }, { username }] });\r\n        if (existingUser) {\r\n            return res.send('Email or username already exists');\r\n        }\r\n\r\n        // Insert the new user into the database\r\n        const newUser = {\r\n            fullName,\r\n            dateOfBirth,\r\n            email,\r\n            username,\r\n            phone,\r\n            password, \r\n        };\r\n\r\n        const result = await collection.insertOne(newUser);\r\n        if (result.insertedCount === 1) {\r\n            res.send('Registration failed.');\r\n        } else {\r\n            res.send('Registration successful! ');\r\n        }\r\n\r\n        client.close();\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send('Internal server error');\r\n    }\r\n});\r\n\r\napp.listen(port, () => {\r\n    console.log(`Server is running on port ${port}`);\r\n});\r\n"],"file":"index.dev.js"}