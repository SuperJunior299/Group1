{"version":3,"sources":["index.js"],"names":["express","require","bodyParser","port","process","env","PORT","mongoUrl","MongoClient","collectionName","app","urlencoded","extended","req","res","_req$body","fullName","dateOfBirth","email","username","phone","password","client","db","collection","newUser","regeneratorRuntime","async","_context","prev","next","body","useUnifiedTopology","awrap","connect","dbName","findOne","$or","sent","abrupt","insertOne","insertedCount","close","t0","existingUser","status","send","stop","listen","console","log","concat"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,WAAaD,QAAQ,wBADHA,QAAxB,WAAMD,qBAAAA,YAGAG,KAAOC,QAAQC,IAAIC,MAAQ,IAF3BJ,IAAAA,UAKAK,SAJkBN,wEAAhBO,OAKO,MACTC,eAAiB,OAJvBC,IAAMA,IAAGR,WAATS,WAAA,CAAAC,UAAA,KAEAF,IAAMH,IAAAA,QAAW,OAAA,WAEjBG,IAAMD,KAAAA,YAAiB,SAAvBI,EAAAC,GAAuB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAf,EAEOF,EAAAkB,KAAtB7B,EAFea,EAEfb,SAAWS,EAFII,EAEJJ,YAAWO,EAFPH,EAEOG,MAAAC,EAFPJ,EAEOI,SAAAC,EAFPL,EAEOK,MAAAC,EAFPN,EAEOM,SAFPO,EAAAC,KAAA,EAGf7B,EAAO,IAAQQ,YAAYD,SAAA,CAAAyB,oBAAA,IAHZJ,EAAAE,KAAA,EAAAJ,mBAAAO,MAUTX,EAAOY,WAVE,KAAA,EAAA,OAKDX,EAAAD,EAAAC,GAAAY,QAQRX,EAAaD,EAAGC,WAAWf,gBAblBmB,EAAAE,KAAA,EAAAJ,mBAAAO,MAKDT,EAAAY,QAAA,CAAAC,IAAA,CAAA,CAAAnB,MAAAA,GAAA,CAAAC,SAAAA,OALC,KAAA,EAAA,GAAAS,EAAAU,KAAA,OAAAV,EAAAW,OAAA,SAKDzB,EACkDD,KAAIkB,qCANrDH,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAKDL,EAAA,CAAAT,SAAAA,EAAAC,YAAAA,EAoBVC,MAAAA,EApBUC,SAAAA,EAAAC,MAAAA,EAQRI,SAAAA,GAbSI,EAAAE,KAAA,GAAAJ,mBAAAO,MAKDT,EAAAgB,UAWahB,IAhBZ,KAAA,GAgBuC,IAhBvCI,EAAAU,KAgBuCG,cAAEvB,EAAAA,KAAAA,wBAAWC,EAAAA,KAAAA,6BAsBnEG,EAAOoB,QAtCQd,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAe,GAAAf,EAAA,MAAA,GAgBTgB,QAAAA,MAAAA,EAAAA,IAyBN9B,EAAI+B,OAAO,KAAKC,KAAK,yBAzCN,KAAA,GAAA,IAAA,MAAA,OAAAlB,EAAAmB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAKDrC,IAAAsC,OAAA7C,KAAA,WAyClB8C,QAAQC,IAAR,6BAAAC,OAAyChD","file":"index.min.js","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst { MongoClient } = require('mongodb');\r\nconst port = process.env.PORT || 3000; \r\nconst app = express();\r\n\r\nconst mongoUrl = 'mongodb+srv://lekhanhtoan07:T14012003oan@server1.h0nl7gl.mongodb.net/'; \r\nconst dbName = 'Web'; \r\nconst collectionName = 'Test'; \r\n\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(express.static('public')); // Serve HTML and CSS files from the 'public' directory\r\n\r\napp.post('/register', async (req, res) => {\r\n    const { fullName, dateOfBirth, email, username, phone, password } = req.body;\r\n\r\n    try {\r\n        const client = new MongoClient(mongoUrl, { useUnifiedTopology: true });\r\n        await client.connect();\r\n\r\n        const db = client.db(dbName);\r\n        const collection = db.collection(collectionName);\r\n\r\n        // Check if email or username already exist\r\n        const existingUser = await collection.findOne({ $or: [{ email }, { username }] });\r\n        if (existingUser) {\r\n            return res.send('Email or username already exists');\r\n        }\r\n\r\n        // Insert the new user into the database\r\n        const newUser = {\r\n            fullName,\r\n            dateOfBirth,\r\n            email,\r\n            username,\r\n            phone,\r\n            password, \r\n        };\r\n\r\n        const result = await collection.insertOne(newUser);\r\n        if (result.insertedCount === 1) {\r\n            res.send('Registration failed.');\r\n        } else {\r\n            res.send('Registration successful! ');\r\n        }\r\n\r\n        client.close();\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send('Internal server error');\r\n    }\r\n});\r\n\r\napp.listen(port, () => {\r\n    console.log(`Server is running on port ${port}`);\r\n});\r\n"]}