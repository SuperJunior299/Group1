{"version":3,"sources":["app.js"],"names":["express","require","MongoClient","process","env","PORT","app","mongoose","mongoUrl","port","use","urlencoded","extended","json","collectionName","req","res","render","post","_req$body","username","password","regeneratorRuntime","async","_context","prev","next","awrap","User","findOne","sent","status","message","stop","client","useUnifiedTopology","connect","user","db","dbName","collection","$or","email","send","newUser","fullName","dateOfBirth","phone","insertOne","insertedCount","console","error","_context2","t0","listen","log","concat"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,oBACAA,QAAQ,WAAxBC,qBAAAA,YADFF,KAAOG,QAAUC,IAACC,MAAxB,IAGMC,IAAMN,UACNO,SAHkBN,QAAQ,YAAxBC,OAIO,MACTM,SAAW,wEAJXC,eAAmBJ,OAOzBC,IAAII,IAAIV,QAAQW,WAAW,CAAEC,UAAU,KALvCN,IAAMC,IAAAA,QAAWN,OAAQ,WAOzBK,IAAII,IAAIV,QAAQa,QAJhBP,IAAMQ,IAAAA,SAAc,SAAAC,EAAGC,GAEvBV,EAAII,OAAIV,WACRM,IAAII,IAAIV,aAAO,SAAAe,EAAQC,GAUrBA,EAAIC,OAAO,eAJZX,IAFDY,KAAA,aAAA,SAAAH,EAAAC,GAAA,IAAAG,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAP,EAIuBJ,EAAKC,KAApBI,EAJRD,EAIQC,SAARC,EAJAF,EAIAE,SAJAG,EAAAE,KAAA,EAAAJ,mBAAAK,MAIAC,KAAAC,QAAA,CAAAT,SAAAA,EAAAC,SAAAA,KAJA,KAAA,EAAAG,EAAAM,KAgBId,EAAIe,OAAO,KAAKlB,KAAK,CAAEmB,QAAS,qBAPbhB,EAAAe,OAAA,KAAAlB,KAAA,CAAAmB,QAAA,iBATvB,KAAA,EAAA,IAAA,MAAA,OAAAR,EAAAS,YAaoCb,IAAAA,KAAAA,SAAAA,SAAAA,EAAFJ,GAAEI,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAWC,EAAAA,KAAAA,EAAXD,EAAWC,SAAAA,EAAXD,EAAWC,YAAAA,EAAXD,EAAWC,MAAAA,EAAXD,EAAWC,SAAAA,EAAXD,EAAWC,MAAAA,EAAXD,EAAWC,SAAXD,EAAAA,KAAAA,EAJbc,EAAA,IAAAhC,YAAAM,SAAA,CAAA2B,oBAAA,IAIaf,EAAAA,KAAAA,EAAAA,mBAAAA,MAJbc,EAAAE,WAIahB,KAAAA,EAAAA,OAE9BiB,EAAJH,EAAUI,GAAAC,QACRvB,EAAAsB,EAAgBzB,WAAKC,gBAHWM,EAAAA,KAAAA,EAAAA,mBAAAA,MAI3BoB,EAAAX,QAAA,CAAAY,IAAA,CAAA,CAAAC,MAAAA,GAAA,CAAAtB,SAAAA,OAJ2BA,KAAAA,EAAAA,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,OAAAA,SAKTY,EAASW,KAAA,qCALAvB,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAJbwB,EAAA,CAAAC,SAAAA,EAAAC,YAAAA,EAAAJ,MAAAA,EAAAtB,SAAAA,EAAA2B,MAAAA,EAAvB1B,SAAAA,GAIoCD,EAAAA,KAAAA,GAAAA,mBAAAA,MAsCPoB,EAAWQ,UAAUJ,IAtCdxB,KAAAA,GAYjB,IAZiBA,EAAAA,KAYjB6B,cAAAjC,EAAA2B,KAAA,wBAAA3B,EAAA2B,KAAA,6BAILT,EAAAA,QAhBsBd,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAgBa8B,QAJ9BC,MAI8BC,EAAAC,IAJ9BrC,EAAAe,OAAA,KAAAY,KAAA,yBAZiBvB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,QAYjBd,IAAAgD,OAAA7C,KAAA,WAAAyC,QAAAK,IAAA,6BAAAC,OAWgBhB","file":"app.min.js","sourcesContent":["const express = require('express');\r\nconst { MongoClient } = require('mongodb');\r\nconst port = process.env.PORT || 3000; \r\nconst app = express();\r\nconst mongoose = require('mongoose');\r\nconst dbName = 'Web'; \r\nconst mongoUrl = 'mongodb+srv://lekhanhtoan07:T14012003oan@server1.h0nl7gl.mongodb.net/';\r\nconst collectionName = 'Test';\r\n\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.static('public'));\r\napp.use(express.json());\r\n\r\n// REGISTER FUNCTION\r\napp.get(\"/index\", (req, res) => {\r\n  res.render(\"index\");\r\n});\r\n\r\napp.get('/loginpage', (req, res) => {\r\n  // Handle the GET request for the login page\r\n  res.render('loginpage'); // Or send a login HTML page\r\n});\r\n\r\napp.post('/loginpage', async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  // Find a user with the provided username and password\r\n  const user = await User.findOne({ username , password  });\r\n\r\n  if (user) {\r\n    res.status(200).json({ message: 'Login successful' });\r\n  } else {\r\n    res.status(401).json({ message: 'Login failed' });\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\napp.post('/index', async (req, res) => {\r\n    const { fullName, dateOfBirth, email, username, phone, password } = req.body;\r\n\r\n    try {\r\n        const client = new MongoClient(mongoUrl, { useUnifiedTopology: true });\r\n        await client.connect();\r\n\r\n        const db = client.db(dbName);\r\n        const collection = db.collection(collectionName);\r\n\r\n        // Check if email or username already exist\r\n        const existingUser = await collection.findOne({ $or: [{ email }, { username }] });\r\n        if (existingUser) {\r\n            return res.send('Email or username already exists');\r\n        }\r\n\r\n        // Insert the new user into the database\r\n        const newUser = {\r\n            fullName,\r\n            dateOfBirth,\r\n            email,\r\n            username ,\r\n            phone,\r\n            password , \r\n        };\r\n\r\n        const result = await collection.insertOne(newUser);\r\n        if (result.insertedCount === 1) {\r\n            res.send('Registration failed.');\r\n        } else {\r\n            res.send('Registration successful! ');\r\n        }\r\n\r\n        client.close();\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send('Internal server error');\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\napp.listen(port, () => {\r\n    console.log(`Server is running on port ${port}`);\r\n});  "]}